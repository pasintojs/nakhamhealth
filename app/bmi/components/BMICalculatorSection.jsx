"use client";

import { useState, useEffect } from "react";

// BMI categories and health recommendations
const BMI_CATEGORIES = {
  underweight: {
    range: "< 18.5",
    label: "‡∏ô‡πâ‡∏≥‡∏´‡∏ô‡∏±‡∏Å‡∏ô‡πâ‡∏≠‡∏¢‡∏Å‡∏ß‡πà‡∏≤‡πÄ‡∏Å‡∏ì‡∏ë‡πå",
    color: "from-blue-500 to-blue-600",
    bgColor: "bg-blue-50",
    borderColor: "border-blue-500",
    icon: "üìâ",
    recommendations: [
      "‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡∏ó‡∏≤‡∏ô‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏õ‡∏£‡∏∞‡πÇ‡∏¢‡∏ä‡∏ô‡πå‡πÅ‡∏•‡∏∞‡∏°‡∏µ‡πÅ‡∏Ñ‡∏•‡∏≠‡∏£‡∏µ‡πà‡πÄ‡∏û‡∏µ‡∏¢‡∏á‡∏û‡∏≠",
      "‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∞‡∏ó‡∏≤‡∏ô‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡∏Ñ‡∏£‡∏ö 5 ‡∏´‡∏°‡∏π‡πà ‡πÇ‡∏î‡∏¢‡πÄ‡∏ô‡πâ‡∏ô‡πÇ‡∏õ‡∏£‡∏ï‡∏µ‡∏ô‡πÅ‡∏•‡∏∞‡∏Ñ‡∏≤‡∏£‡πå‡πÇ‡∏ö‡πÑ‡∏Æ‡πÄ‡∏î‡∏£‡∏ï",
      "‡∏≠‡∏≠‡∏Å‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏Å‡∏≤‡∏¢‡πÅ‡∏ö‡∏ö Resistance Training ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏°‡∏ß‡∏•‡∏Å‡∏•‡πâ‡∏≤‡∏°‡πÄ‡∏ô‡∏∑‡πâ‡∏≠",
      "‡∏´‡∏•‡∏µ‡∏Å‡πÄ‡∏•‡∏µ‡πà‡∏¢‡∏á‡∏Å‡∏≤‡∏£‡∏î‡∏∑‡πà‡∏°‡∏ô‡πâ‡∏≥‡∏°‡∏≤‡∏Å‡∏Å‡πà‡∏≠‡∏ô‡∏≠‡∏≤‡∏´‡∏≤‡∏£",
      "‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∞‡∏ó‡∏≤‡∏ô‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡∏ö‡πà‡∏≠‡∏¢‡πÜ ‡∏ß‡∏±‡∏ô‡∏•‡∏∞ 5-6 ‡∏°‡∏∑‡πâ‡∏≠",
    ],
  },
  normal: {
    range: "18.5 - 24.9",
    label: "‡∏ô‡πâ‡∏≥‡∏´‡∏ô‡∏±‡∏Å‡∏õ‡∏Å‡∏ï‡∏¥",
    color: "from-green-500 to-green-600",
    bgColor: "bg-green-50",
    borderColor: "border-green-500",
    icon: "‚úÖ",
    recommendations: [
      "‡∏£‡∏±‡∏Å‡∏©‡∏≤‡∏ô‡πâ‡∏≥‡∏´‡∏ô‡∏±‡∏Å‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô‡πÉ‡∏´‡πâ‡∏Ñ‡∏á‡∏ó‡∏µ‡πà",
      "‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∞‡∏ó‡∏≤‡∏ô‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡∏Ñ‡∏£‡∏ö 5 ‡∏´‡∏°‡∏π‡πà‡πÉ‡∏ô‡∏™‡∏±‡∏î‡∏™‡πà‡∏ß‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏°",
      "‡∏≠‡∏≠‡∏Å‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏Å‡∏≤‡∏¢‡∏™‡∏°‡πà‡∏≥‡πÄ‡∏™‡∏°‡∏≠‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ô‡πâ‡∏≠‡∏¢‡∏™‡∏±‡∏õ‡∏î‡∏≤‡∏´‡πå‡∏•‡∏∞ 150 ‡∏ô‡∏≤‡∏ó‡∏µ",
      "‡∏î‡∏∑‡πà‡∏°‡∏ô‡πâ‡∏≥‡πÄ‡∏õ‡∏•‡πà‡∏≤‡∏ß‡∏±‡∏ô‡∏•‡∏∞ 8-10 ‡πÅ‡∏Å‡πâ‡∏ß",
      "‡∏ô‡∏≠‡∏ô‡∏´‡∏•‡∏±‡∏ö‡πÉ‡∏´‡πâ‡πÄ‡∏û‡∏µ‡∏¢‡∏á‡∏û‡∏≠ ‡∏ß‡∏±‡∏ô‡∏•‡∏∞ 7-9 ‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á",
    ],
  },
  overweight: {
    range: "25.0 - 29.9",
    label: "‡∏ô‡πâ‡∏≥‡∏´‡∏ô‡∏±‡∏Å‡πÄ‡∏Å‡∏¥‡∏ô",
    color: "from-yellow-500 to-orange-500",
    bgColor: "bg-yellow-50",
    borderColor: "border-yellow-500",
    icon: "‚ö†Ô∏è",
    recommendations: [
      "‡∏•‡∏î‡∏ô‡πâ‡∏≥‡∏´‡∏ô‡∏±‡∏Å 5-10% ‡∏Ç‡∏≠‡∏á‡∏ô‡πâ‡∏≥‡∏´‡∏ô‡∏±‡∏Å‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô",
      "‡∏•‡∏î‡∏Å‡∏≤‡∏£‡∏ó‡∏≤‡∏ô‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡∏ó‡∏µ‡πà‡∏°‡∏µ‡πÑ‡∏Ç‡∏°‡∏±‡∏ô‡πÅ‡∏•‡∏∞‡∏ô‡πâ‡∏≥‡∏ï‡∏≤‡∏•‡∏™‡∏π‡∏á",
      "‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡∏ó‡∏≤‡∏ô‡∏ú‡∏±‡∏Å‡πÅ‡∏•‡∏∞‡∏ú‡∏•‡πÑ‡∏°‡πâ",
      "‡∏≠‡∏≠‡∏Å‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏Å‡∏≤‡∏¢‡πÅ‡∏ö‡∏ö Cardio 30-45 ‡∏ô‡∏≤‡∏ó‡∏µ‡∏ï‡πà‡∏≠‡∏ß‡∏±‡∏ô",
      "‡∏Ñ‡∏ß‡∏ö‡∏Ñ‡∏∏‡∏°‡∏Ç‡∏ô‡∏≤‡∏î‡∏Ç‡∏≠‡∏á‡∏´‡∏ô‡∏∂‡πà‡∏á‡∏°‡∏∑‡πâ‡∏≠‡∏≠‡∏≤‡∏´‡∏≤‡∏£",
    ],
  },
  obese1: {
    range: "30.0 - 34.9",
    label: "‡∏≠‡πâ‡∏ß‡∏ô‡∏£‡∏∞‡∏î‡∏±‡∏ö 1",
    color: "from-orange-500 to-red-500",
    bgColor: "bg-orange-50",
    borderColor: "border-orange-500",
    icon: "üö®",
    recommendations: [
      "‡∏•‡∏î‡∏ô‡πâ‡∏≥‡∏´‡∏ô‡∏±‡∏Å 10-15% ‡∏Ç‡∏≠‡∏á‡∏ô‡πâ‡∏≥‡∏´‡∏ô‡∏±‡∏Å‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô",
      "‡∏õ‡∏£‡∏∂‡∏Å‡∏©‡∏≤‡∏´‡∏°‡∏≠‡∏´‡∏£‡∏∑‡∏≠‡∏ô‡∏±‡∏Å‡πÇ‡∏†‡∏ä‡∏ô‡∏≤‡∏Å‡∏≤‡∏£",
      "‡∏•‡∏î‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡∏ó‡∏µ‡πà‡πÉ‡∏´‡πâ‡∏û‡∏•‡∏±‡∏á‡∏á‡∏≤‡∏ô‡∏™‡∏π‡∏á ‡πÄ‡∏ä‡πà‡∏ô ‡∏Ç‡∏ô‡∏°‡∏´‡∏ß‡∏≤‡∏ô ‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡∏ó‡∏≠‡∏î",
      "‡∏≠‡∏≠‡∏Å‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏Å‡∏≤‡∏¢‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ô‡πâ‡∏≠‡∏¢‡∏ß‡∏±‡∏ô‡∏•‡∏∞ 45-60 ‡∏ô‡∏≤‡∏ó‡∏µ",
      "‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏∏‡∏Ç‡∏†‡∏≤‡∏û‡πÄ‡∏õ‡πá‡∏ô‡∏õ‡∏£‡∏∞‡∏à‡∏≥",
    ],
  },
  obese2: {
    range: "35.0 - 39.9",
    label: "‡∏≠‡πâ‡∏ß‡∏ô‡∏£‡∏∞‡∏î‡∏±‡∏ö 2",
    color: "from-red-500 to-red-600",
    bgColor: "bg-red-50",
    borderColor: "border-red-500",
    icon: "üÜò",
    recommendations: [
      "‡∏Ñ‡∏ß‡∏£‡∏õ‡∏£‡∏∂‡∏Å‡∏©‡∏≤‡πÅ‡∏û‡∏ó‡∏¢‡πå‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ß‡∏≤‡∏á‡πÅ‡∏ú‡∏ô‡∏•‡∏î‡∏ô‡πâ‡∏≥‡∏´‡∏ô‡∏±‡∏Å‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏à‡∏£‡∏¥‡∏á‡∏à‡∏±‡∏á",
      "‡∏≠‡∏≤‡∏à‡∏ï‡πâ‡∏≠‡∏á‡πÉ‡∏ä‡πâ‡∏¢‡∏≤‡∏ä‡πà‡∏ß‡∏¢‡∏•‡∏î‡∏ô‡πâ‡∏≥‡∏´‡∏ô‡∏±‡∏Å‡∏†‡∏≤‡∏¢‡πÉ‡∏ï‡πâ‡∏Å‡∏≤‡∏£‡∏î‡∏π‡πÅ‡∏•‡πÅ‡∏û‡∏ó‡∏¢‡πå",
      "‡∏Ñ‡∏ß‡∏ö‡∏Ñ‡∏∏‡∏°‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡∏≠‡∏¢‡πà‡∏≤‡∏á‡πÄ‡∏Ç‡πâ‡∏°‡∏á‡∏ß‡∏î",
      "‡∏≠‡∏≠‡∏Å‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏Å‡∏≤‡∏¢‡∏†‡∏≤‡∏¢‡πÉ‡∏ï‡πâ‡∏Å‡∏≤‡∏£‡∏î‡∏π‡πÅ‡∏•‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡πÄ‡∏ä‡∏µ‡πà‡∏¢‡∏ß‡∏ä‡∏≤‡∏ç",
      "‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏∏‡∏Ç‡∏†‡∏≤‡∏û‡∏™‡∏°‡πà‡∏≥‡πÄ‡∏™‡∏°‡∏≠",
    ],
  },
  obese3: {
    range: "‚â• 40.0",
    label: "‡∏≠‡πâ‡∏ß‡∏ô‡∏£‡∏∞‡∏î‡∏±‡∏ö 3 (‡∏≠‡πâ‡∏ß‡∏ô‡∏°‡∏≤‡∏Å)",
    color: "from-red-600 to-red-700",
    bgColor: "bg-red-50",
    borderColor: "border-red-600",
    icon: "üöë",
    recommendations: [
      "‡∏ï‡πâ‡∏≠‡∏á‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏£‡∏±‡∏Å‡∏©‡∏≤‡∏à‡∏≤‡∏Å‡πÅ‡∏û‡∏ó‡∏¢‡πå‡πÇ‡∏î‡∏¢‡πÄ‡∏£‡πá‡∏ß",
      "‡∏≠‡∏≤‡∏à‡∏ï‡πâ‡∏≠‡∏á‡∏û‡∏¥‡∏à‡∏≤‡∏£‡∏ì‡∏≤‡∏Å‡∏≤‡∏£‡∏ú‡πà‡∏≤‡∏ï‡∏±‡∏î‡∏•‡∏î‡∏ô‡πâ‡∏≥‡∏´‡∏ô‡∏±‡∏Å",
      "‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏ï‡∏¥‡∏î‡∏ï‡∏≤‡∏°‡∏≠‡∏¢‡πà‡∏≤‡∏á‡πÉ‡∏Å‡∏•‡πâ‡∏ä‡∏¥‡∏î‡∏à‡∏≤‡∏Å‡∏ó‡∏µ‡∏°‡πÅ‡∏û‡∏ó‡∏¢‡πå",
      "‡∏Ñ‡∏ß‡∏ö‡∏Ñ‡∏∏‡∏°‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡∏≠‡∏¢‡πà‡∏≤‡∏á‡πÄ‡∏Ç‡πâ‡∏°‡∏á‡∏ß‡∏î‡∏†‡∏≤‡∏¢‡πÉ‡∏ï‡πâ‡∏Å‡∏≤‡∏£‡∏î‡∏π‡πÅ‡∏•‡∏ô‡∏±‡∏Å‡πÇ‡∏†‡∏ä‡∏ô‡∏≤‡∏Å‡∏≤‡∏£",
      "‡∏≠‡∏≠‡∏Å‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏Å‡∏≤‡∏¢‡∏ï‡∏≤‡∏°‡∏ó‡∏µ‡πà‡πÅ‡∏û‡∏ó‡∏¢‡πå‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô",
    ],
  },
};

export default function BMICalculatorSection() {
  const [weight, setWeight] = useState("");
  const [height, setHeight] = useState("");
  const [bmi, setBMI] = useState(null);
  const [category, setCategory] = useState(null);
  const [idealWeight, setIdealWeight] = useState(null);

  const calculateBMI = () => {
    if (weight && height) {
      const weightNum = parseFloat(weight);
      const heightNum = parseFloat(height) / 100; // Convert cm to meters

      if (weightNum > 0 && heightNum > 0) {
        const bmiValue = weightNum / (heightNum * heightNum);
        setBMI(bmiValue);

        // Determine category
        let bmiCategory;
        if (bmiValue < 18.5) {
          bmiCategory = BMI_CATEGORIES.underweight;
        } else if (bmiValue < 25) {
          bmiCategory = BMI_CATEGORIES.normal;
        } else if (bmiValue < 30) {
          bmiCategory = BMI_CATEGORIES.overweight;
        } else if (bmiValue < 35) {
          bmiCategory = BMI_CATEGORIES.obese1;
        } else if (bmiValue < 40) {
          bmiCategory = BMI_CATEGORIES.obese2;
        } else {
          bmiCategory = BMI_CATEGORIES.obese3;
        }

        setCategory(bmiCategory);

        // Calculate ideal weight range (BMI 18.5-24.9)
        const idealWeightMin = 18.5 * (heightNum * heightNum);
        const idealWeightMax = 24.9 * (heightNum * heightNum);
        setIdealWeight({ min: idealWeightMin, max: idealWeightMax });
      }
    }
  };

  useEffect(() => {
    calculateBMI();
  }, [weight, height]);

  const resetCalculator = () => {
    setWeight("");
    setHeight("");
    setBMI(null);
    setCategory(null);
    setIdealWeight(null);
  };

  return (
    <div className="max-w-6xl mx-auto px-6 py-16 relative">
      {/* Enhanced section header */}
      <div className="text-center mb-12">
        <h1 className="animate-pulse text-4xl pt-1 sm:text-5xl font-bold bg-gradient-to-r from-sky-600 via-cyan-600 to-emerald-600 bg-clip-text text-transparent mb-4">
          ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏Ñ‡πà‡∏≤ BMI
        </h1>
        <p className="text-slate-600 text-lg max-w-2xl mx-auto">
          ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏î‡∏±‡∏ä‡∏ô‡∏µ‡∏°‡∏ß‡∏•‡∏Å‡∏≤‡∏¢ (Body Mass Index) ‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì
          ‡πÅ‡∏•‡∏∞‡∏£‡∏±‡∏ö‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏î‡∏π‡πÅ‡∏•‡∏™‡∏∏‡∏Ç‡∏†‡∏≤‡∏û‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏°
        </p>
      </div>

      {/* Input Section */}
      <div className="bg-white rounded-lg shadow-lg p-8 mb-8">
        <div className="max-w-md mx-auto space-y-6">
          <div>
            <label
              htmlFor="weight"
              className="block text-lg font-medium text-slate-700 mb-3"
            >
              ‡∏ô‡πâ‡∏≥‡∏´‡∏ô‡∏±‡∏Å (‡∏Å‡∏¥‡πÇ‡∏•‡∏Å‡∏£‡∏±‡∏°)
            </label>
            <input
              type="number"
              id="weight"
              value={weight}
              onChange={(e) => setWeight(e.target.value)}
              placeholder="‡πÉ‡∏™‡πà‡∏ô‡πâ‡∏≥‡∏´‡∏ô‡∏±‡∏Å‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì"
              className="w-full px-4 py-3 border border-slate-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500 text-lg"
              min="1"
              max="300"
              step="0.1"
            />
          </div>

          <div>
            <label
              htmlFor="height"
              className="block text-lg font-medium text-slate-700 mb-3"
            >
              ‡∏™‡πà‡∏ß‡∏ô‡∏™‡∏π‡∏á (‡πÄ‡∏ã‡∏ô‡∏ï‡∏¥‡πÄ‡∏°‡∏ï‡∏£)
            </label>
            <input
              type="number"
              id="height"
              value={height}
              onChange={(e) => setHeight(e.target.value)}
              placeholder="‡πÉ‡∏™‡πà‡∏™‡πà‡∏ß‡∏ô‡∏™‡∏π‡∏á‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì"
              className="w-full px-4 py-3 border border-slate-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500 text-lg"
              min="50"
              max="250"
              step="0.1"
            />
          </div>

          {weight && height && (
            <div className="flex space-x-4">
              <button
                onClick={calculateBMI}
                className="flex-1 bg-blue-600 text-white py-3 px-6 rounded-lg font-medium hover:bg-blue-700 transition-colors"
              >
                ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì BMI
              </button>
              <button
                onClick={resetCalculator}
                className="px-6 py-3 border border-slate-300 text-slate-600 rounded-lg font-medium hover:bg-slate-50 transition-colors"
              >
                ‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï
              </button>
            </div>
          )}
        </div>
      </div>

      {/* BMI Result */}
      {bmi && category && (
        <div className="space-y-8">
          {/* BMI Score Display */}
          <div
            className={`bg-gradient-to-r ${category.color} text-white rounded-lg shadow-lg p-6`}
          >
            <div className="text-center">
              <div className="text-6xl mb-4">{category.icon}</div>
              <h2 className="text-3xl font-bold mb-2">
                ‡∏Ñ‡πà‡∏≤ BMI ‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì: {bmi.toFixed(1)}
              </h2>
              <p className="text-xl mb-2">{category.label}</p>
              <p className="text-lg opacity-90">‡∏ä‡πà‡∏ß‡∏á BMI: {category.range}</p>
            </div>
          </div>

          {/* Ideal Weight Range */}
          {idealWeight && (
            <div className="bg-white rounded-lg shadow-lg p-6">
              <h3 className="text-2xl font-bold text-slate-800 mb-4">
                üéØ ‡∏ô‡πâ‡∏≥‡∏´‡∏ô‡∏±‡∏Å‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏°
              </h3>
              <div className="bg-slate-50 rounded-lg p-4">
                <p className="text-lg text-slate-700">
                  ‡∏ô‡πâ‡∏≥‡∏´‡∏ô‡∏±‡∏Å‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏°‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏™‡πà‡∏ß‡∏ô‡∏™‡∏π‡∏á {height} ‡∏ã‡∏°. ‡∏Ñ‡∏∑‡∏≠:{" "}
                  <span className="font-bold text-green-600">
                    {idealWeight.min.toFixed(1)} - {idealWeight.max.toFixed(1)}{" "}
                    ‡∏Å‡∏Å.
                  </span>
                </p>
                {bmi < 18.5 && (
                  <p className="text-blue-600 mt-2">
                    ‡∏Ñ‡∏∏‡∏ì‡∏Ñ‡∏ß‡∏£‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ô‡πâ‡∏≥‡∏´‡∏ô‡∏±‡∏Å‡∏≠‡∏µ‡∏Å{" "}
                    {(idealWeight.min - parseFloat(weight)).toFixed(1)} ‡∏Å‡∏Å.
                  </p>
                )}
                {bmi >= 25 && (
                  <p className="text-orange-600 mt-2">
                    ‡∏Ñ‡∏∏‡∏ì‡∏Ñ‡∏ß‡∏£‡∏•‡∏î‡∏ô‡πâ‡∏≥‡∏´‡∏ô‡∏±‡∏Å{" "}
                    {(parseFloat(weight) - idealWeight.max).toFixed(1)} ‡∏Å‡∏Å.
                  </p>
                )}
              </div>
            </div>
          )}

          {/* Health Recommendations */}
          <div
            className={`${category.bgColor} border ${category.borderColor} rounded-lg shadow-lg p-6`}
          >
            <h3 className="text-2xl font-bold text-slate-800 mb-4">
              üí° ‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏™‡∏∏‡∏Ç‡∏†‡∏≤‡∏û
            </h3>
            <ul className="space-y-3">
              {category.recommendations.map((recommendation, idx) => (
                <li key={idx} className="text-slate-700 flex items-start">
                  <span className="text-slate-500 mr-3 mt-1">‚Ä¢</span>
                  <span>{recommendation}</span>
                </li>
              ))}
            </ul>
          </div>

          {/* BMI Chart */}
          <div className="bg-white rounded-lg shadow-lg p-6">
            <h3 className="text-2xl font-bold text-slate-800 mb-6">
              üìä ‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡πÄ‡∏Å‡∏ì‡∏ë‡πå BMI
            </h3>
            <div className="grid md:grid-cols-2 lg:grid-cols-3 gap-4">
              {Object.entries(BMI_CATEGORIES).map(([key, cat]) => (
                <div
                  key={key}
                  className={`${cat.bgColor} border-2 ${
                    category === cat ? cat.borderColor : "border-slate-200"
                  } rounded-lg p-4 transition-all ${
                    category === cat ? "ring-2 ring-offset-2 ring-blue-500" : ""
                  }`}
                >
                  <div className="text-center">
                    <div className="text-2xl mb-2">{cat.icon}</div>
                    <h4 className="font-bold text-slate-800 mb-1">
                      {cat.label}
                    </h4>
                    <p className="text-sm text-slate-600">BMI: {cat.range}</p>
                  </div>
                </div>
              ))}
            </div>
          </div>

          {/* Important Notes */}
          <div className="bg-yellow-50 border border-yellow-200 rounded-lg p-6">
            <h3 className="text-xl font-bold text-yellow-800 mb-4">
              üìù ‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç
            </h3>
            <ul className="space-y-2">
              <li className="text-yellow-700 flex items-start">
                <span className="text-yellow-500 mr-2">‚Ä¢</span>
                ‡∏Ñ‡πà‡∏≤ BMI ‡πÄ‡∏õ‡πá‡∏ô‡πÄ‡∏û‡∏µ‡∏¢‡∏á‡∏ï‡∏±‡∏ß‡∏ä‡∏µ‡πâ‡∏ß‡∏±‡∏î‡πÄ‡∏ö‡∏∑‡πâ‡∏≠‡∏á‡∏ï‡πâ‡∏ô
                ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ö‡∏≠‡∏Å‡∏™‡∏±‡∏î‡∏™‡πà‡∏ß‡∏ô‡∏Ç‡∏≠‡∏á‡∏°‡∏ß‡∏•‡∏Å‡∏•‡πâ‡∏≤‡∏°‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡πÅ‡∏•‡∏∞‡πÑ‡∏Ç‡∏°‡∏±‡∏ô‡πÑ‡∏î‡πâ
              </li>
              <li className="text-yellow-700 flex items-start">
                <span className="text-yellow-500 mr-2">‚Ä¢</span>
                ‡∏ô‡∏±‡∏Å‡∏Å‡∏µ‡∏¨‡∏≤‡∏≠‡∏≤‡∏à‡∏°‡∏µ BMI ‡∏™‡∏π‡∏á‡πÄ‡∏ô‡∏∑‡πà‡∏≠‡∏á‡∏à‡∏≤‡∏Å‡∏°‡∏µ‡∏°‡∏ß‡∏•‡∏Å‡∏•‡πâ‡∏≤‡∏°‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏°‡∏≤‡∏Å
                ‡πÅ‡∏ï‡πà‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏´‡∏°‡∏≤‡∏¢‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ß‡πà‡∏≤‡∏≠‡πâ‡∏ß‡∏ô
              </li>
              <li className="text-yellow-700 flex items-start">
                <span className="text-yellow-500 mr-2">‚Ä¢</span>
                ‡∏ú‡∏π‡πâ‡∏™‡∏π‡∏á‡∏≠‡∏≤‡∏¢‡∏∏ ‡πÄ‡∏î‡πá‡∏Å ‡πÅ‡∏•‡∏∞‡∏´‡∏ç‡∏¥‡∏á‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡∏£‡∏£‡∏†‡πå
                ‡∏Ñ‡∏ß‡∏£‡∏õ‡∏£‡∏∂‡∏Å‡∏©‡∏≤‡πÅ‡∏û‡∏ó‡∏¢‡πå‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏°
              </li>
              <li className="text-yellow-700 flex items-start">
                <span className="text-yellow-500 mr-2">‚Ä¢</span>
                ‡∏´‡∏≤‡∏Å‡∏°‡∏µ‡∏õ‡∏±‡∏ç‡∏´‡∏≤‡∏™‡∏∏‡∏Ç‡∏†‡∏≤‡∏û‡∏´‡∏£‡∏∑‡∏≠‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏ö‡∏∏‡∏Ñ‡∏Ñ‡∏•
                ‡∏Ñ‡∏ß‡∏£‡∏õ‡∏£‡∏∂‡∏Å‡∏©‡∏≤‡πÅ‡∏û‡∏ó‡∏¢‡πå‡∏´‡∏£‡∏∑‡∏≠‡∏ô‡∏±‡∏Å‡πÇ‡∏†‡∏ä‡∏ô‡∏≤‡∏Å‡∏≤‡∏£
              </li>
            </ul>
          </div>
        </div>
      )}

      {/* Initial instruction */}
      {!bmi && (
        <div className="text-center py-12">
          <div className="text-6xl mb-4">‚öñÔ∏è</div>
          <p className="text-lg text-slate-600">
            ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÉ‡∏™‡πà‡∏ô‡πâ‡∏≥‡∏´‡∏ô‡∏±‡∏Å‡πÅ‡∏•‡∏∞‡∏™‡πà‡∏ß‡∏ô‡∏™‡∏π‡∏á‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏Ñ‡πà‡∏≤ BMI
          </p>
        </div>
      )}
    </div>
  );
}
